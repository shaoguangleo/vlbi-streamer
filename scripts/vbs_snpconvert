#!/bin/bash
usage()
{
cat << EOF

$0 adds vlbistreamer commands to a snp-file. The output is a new snp-file with the name augmented to <snp>vbs.snp and a separate <snp>.recqueue script. The recqueue scripts can be run to queue the recording schedule to the vlbistreamer server.

If no host is given, the script will presume a vlbistreamer instance is running on localhost.

usage: $0 <snp-file> <options>

Options:
  -h <host> Prepare queue script for specific host
EOF
}
#Go through params
VLBIHOST=ara.vlbi
VBS_QUEUE=vbs_record
n=1
while [ $# -gt 0 ]
do
  case $1 in
    -h) 
      VLBIHOST=$2
      REMOTER="ssh $VLBIHOST"
      shift
      ;;
    -*) echo "Unknown argument $1";usage;exit 1; echo "Errors in parameters of streaming $RECNAME" >> $LOGFILE;;
  *) eval "arg_$n=$1";n=$(($n+1));;
esac
shift
done
if [ "$arg_1" == "" ]; then 
  usage
  exit -1
fi
SNP=$arg_1
if [ ! -z "$arg_2" ]; then
  #EXTRAOUT=`echo $SNP|sed 's/\(.*\)\.snp/\1\.vbs/'`
  EXTRAOUT=$arg_2
  echo "#!/bin/bash" > $EXTRAOUT
else
  EXTRAOUT=$arg_1".recqueue"
fi

#REMOTER="ssh $VLBIHOST"
I=1
#SNAMEVAR=scan_name

echo "Snap file: $SNP"

# get scan names, convert "," to space
sed -n -e '/scan_name=/s/scan_name=//p' $SNP | sed -n -e 's/,/ /gp' > ./scans

# get start times
# sed -n -e '/preob/,/!/p' $SNP | grep ! | sed -n -e 's/[!.]/ /gp' > ./starttimes
cat $SNP | grep disk_pos -1 | grep ! | sed -n -e 's/[!.]/ /gp' > ./starttimes

# get end times
#cat $SNP | grep data_valid=off -1 | grep ! | sed -n -e 's/[!.]/ /gp'|sed -n -e 's/[:.]/ /gp' > ./endtimes
#if [ ! -e $EXTRAOUT ]
#then
  echo "Emptying old file $EXTRAOUT"
  echo "#!/bin/bash" > $EXTRAOUT
#fi


#echo $SNP|sed 's/\(.*\)\.snp/\1vbs\.snp/'
NEWFILE=`echo $SNP|sed 's/\(.*\)\.snp/\1vbs\.snp/'`
rm $NEWFILE
cp $SNP $NEWFILE

BIGBADA=""
UNCORKED=0
#if [ ! -z "$REMOTER" ]
#then
  #echo $REMOTER \" \\ >> $EXTRAOUT
#fi

I=1
LC=`wc -l scans | awk '{print $1}'`
while [ $I -le $LC ]
do
  RARRAY=(`tail -n +$I ./scans | head -1`)
  SARRAY=(`tail -n +$I ./starttimes | head -1`)

  #Use time from EPOCH as start time, since its nice to use in C
  STARTEPOCH=`date -u -d "01/01/${SARRAY[0]} + ${SARRAY[1]} days ${SARRAY[2]}" +%s `
  #Duration is straight in the scan name.
  dur=${RARRAY[4]}
  #Trying to comform with http://vlbi.org/filename/
  EXPNAME=${RARRAY[1]}_${RARRAY[2]}_${RARRAY[0]}

  LINEOFSCAN=`grep "scan_name=${RARRAY[0]}" $NEWFILE -n| sed  's/\([0-9]*\).*/\1/'`
  #Adding $I to $LINEOFSCAN here because augmenting the file changes the
  #result each time. Don't know why thought..
  sed -i "$LINEOFSCAN a sy=$REMOTER \"$VBS_QUEUE $EXPNAME $dur -e $STARTEPOCH\"" $NEWFILE
  
  #echo $EXPNAME $STARTEPOCH $dur
  if [ ! -z "$REMOTER" ]
  then
    if [ "$UNCORKED" == "0" ]
    then
      UNCORKED=1
      BIGBADA="${VBS_QUEUE} $EXPNAME $dur -e $STARTEPOCH"
    else
      BIGBADA="$BIGBADA ; ${VBS_QUEUE} $EXPNAME $dur -e $STARTEPOCH"
    fi
    #echo "$REMOTER \"$VBS_QUEUE $EXPNAME $dur -e $STARTEPOCH\"">> $EXTRAOUT
    #echo \;${VBS_QUEUE} $EXPNAME $dur -e $STARTEPOCH\\>> $EXTRAOUT

  else
    echo $VBS_QUEUE $EXPNAME $dur -e $STARTEPOCH >> $EXTRAOUT
  fi
  I=$(($I+1))
done < starttimes

if [ ! -z "$REMOTER" ]
then
  #echo \" >> $EXTRAOUT
  echo $REMOTER \""$BIGBADA\"" >> $EXTRAOUT
fi

chmod +x $EXTRAOUT
